Search.setIndex({"docnames": ["examples", "index", "speechtotext/benchmark/index", "speechtotext/datasets", "speechtotext/functions", "speechtotext/index", "speechtotext/metric/index", "speechtotext/model/index", "speechtotext/plot/index"], "filenames": ["examples.rst", "index.rst", "speechtotext/benchmark/index.rst", "speechtotext/datasets.rst", "speechtotext/functions.rst", "speechtotext/index.rst", "speechtotext/metric/index.rst", "speechtotext/model/index.rst", "speechtotext/plot/index.rst"], "titles": ["Code Examples for speechtotext package", "Welcome to speechtotext\u2019s documentation!", "speechtotext benchmark package", "Datasets", "Functions", "Speechtotext package", "speechtotext metric package", "Speechtotext model package", "speechtotext plot package"], "terms": {"packag": [3, 4], "submodul": 1, "model": [0, 1, 2, 4, 5, 6, 8], "modelwrapp": [1, 2], "modul": [0, 1, 5], "whisperwrapp": 1, "benchmark": [0, 1, 3, 4, 6, 7, 8], "custombenchmark": [0, 1], "plot": [0, 1, 6], "customplot": 1, "metric": [0, 1, 2, 7, 8], "custommetr": [0, 1, 8], "index": [1, 4], "search": 1, "page": [0, 1], "us": [0, 2, 3, 4, 5, 6, 7, 8], "thi": [0, 2, 3, 4, 5, 6, 7, 8], "like": [0, 2, 3, 4, 6, 7, 8], "import": [0, 2, 3, 4, 6, 7, 8], "from": [0, 2, 3, 4, 6, 7, 8], "dataset": [0, 2, 5, 6, 7], "set": [0, 2, 3, 4, 7], "number_of_sampl": [0, 2, 3, 7], "10": [2, 3, 7], "path_to_dir": [0, 2, 3, 7], "path": [0, 2, 3, 4, 7], "dir": [2, 3, 7], "name": [0, 2, 3, 4, 7], "dataset_nam": [0, 2, 3, 7], "set_dataset": [2, 7], "creat": [0, 2, 3, 4, 6, 7, 8], "wb": [0, 2], "whisperbenchmark": [0, 2], "run": [0, 2, 7], "convert": 2, "panda": [2, 4, 8], "datafram": [2, 3, 4, 6, 8], "df": [2, 3, 4, 6, 8], "convert_to_panda": 2, "print": [2, 3, 6], "save": [2, 4, 6, 8], "csv": [2, 4], "datetim": 2, "benchmark_results_to_csv": [2, 4], "5": 2, "wapib": [0, 2], "whisperapibenchmark": [0, 2], "benchmark_dataset": 2, "dataset_rdh": 2, "benchmark_list": [0, 2], "list": [0, 2, 4, 7, 8], "result": [0, 2, 4, 6, 7, 8], "run_benchmark": [0, 2], "class": [2, 3, 4, 6, 7, 8], "with_clean": [2, 6, 7], "true": [2, 4, 6, 7], "base": [2, 3, 4, 6, 7, 8], "abc": [2, 4, 7], "i": [0, 2, 3, 5, 8], "test": [0, 2, 5], "valid": [2, 4, 5], "an": [0, 2, 3, 8], "parent": [2, 7, 8], "all": [2, 4, 8], "benchmark_sampl": [2, 7], "just": 2, "sampl": [2, 3, 7], "share": 2, "child": [2, 7, 8], "type": [2, 3, 4, 6, 7, 8], "sampledataset": [2, 3, 7], "none": 2, "return": [2, 3, 4, 6, 7, 8], "pd": [2, 4, 6], "core": [2, 4, 6, 8], "frame": [2, 4, 6, 8], "abstract": [2, 4, 6, 7, 8], "create_model": [2, 7], "wrapper": [2, 7], "save_to_csv": 2, "save_nam": [2, 4], "str": [2, 3, 4, 6, 7, 8], "output": [2, 4], "paramet": [2, 3, 4, 6, 7], "filenam": [2, 4], "classmethod": 2, "update_sampl": 2, "int": [2, 3, 7], "updat": 2, "number": [2, 3, 7], "al": 2, "out": 2, "api": [2, 7], "whisper": [2, 7], "model_bas": [2, 7], "whisperapi": 2, "local": [2, 7], "id": [3, 6, 7], "existing_id": 3, "get": [3, 7], "audio": [3, 6, 7], "file": [3, 6, 7], "get_path_of_frag": 3, "transcript": [0, 3, 4, 6, 7], "get_text_of_id": 3, "n": [3, 7], "trandom": 3, "dataset_n_random": 3, "get_n_sampl": 3, "file_ext": 3, "wav": 3, "datasetbar": 3, "extract": 3, "data": [3, 8], "folder": [0, 3, 4, 6, 8], "random": [3, 7], "load_transcript": 3, "load": [0, 3], "object": [3, 6, 8], "bare": 3, "fragment": 3, "rais": 3, "filenotfounderror": 3, "doesn": 3, "t": 3, "exist": 3, "text": [3, 4, 7], "string": [3, 4], "spoken": 3, "forc": 4, "torch": 4, "cuda": 4, "force_cudnn_initi": [0, 4], "clean": [4, 7], "string_clean": 4, "ha": 4, "8": 4, "regex_string_pars": 4, "regex": 4, "parc": 4, "up": 4, "ar": [3, 4, 8], "baseresult": [4, 6, 8], "report_fold": [4, 6, 8], "file_nam": [4, 6, 8], "report": [4, 6], "benchmark_results_2023_03_31_h_08_34": [], "option": [4, 7], "default": [4, 6, 7], "default_csv_nam": 4, "join_benchmark_result": 4, "set_index": 4, "join": 4, "bool": [4, 7], "model_nam": [4, 7, 8], "audio_id": [4, 6], "can": [4, 8], "multidispatch": 4, "allow": 4, "method": 4, "overload": 4, "save_folder_nam": 4, "report_nam": [0, 4, 8], "folder_nam": 4, "make": 4, "default_report_fold": 4, "separate_benchmark_results_by_model": 4, "dict": 4, "seper": 4, "each": [4, 7], "stt": 4, "unclean": 4, "function": [0, 5, 6, 8], "calcul": 6, "m": 6, "de": 6, "stoel": 6, "heeft": 6, "krassen": 6, "gemaakt": 6, "op": 6, "vloer": 6, "id_from_dataset": 6, "refer": 6, "hypothesi": 6, "calul": 6, "attribut": 6, "class_attribut": 6, "The": [3, 6], "wer": [6, 8], "word": 6, "error": 6, "rate": 6, "float": 6, "mer": [6, 8], "match": 6, "wil": [6, 8], "inform": 6, "lost": 6, "wip": [6, 8], "preserv": 6, "cer": [6, 8], "charact": 6, "notebook_metrics_print": 6, "custom": [6, 8], "matplotlib": [6, 8], "pictur": [6, 8], "benchmarkresult": [6, 8], "basemetr": 6, "def": [6, 7, 8], "create_df": 6, "self": [6, 7, 8], "add": [6, 8], "custom_result": [6, 8], "append": [6, 7, 8], "need": [6, 7, 8], "defaultmetr": [6, 8], "statist": 6, "implement": 7, "modulewrapp": 7, "modelvers": 7, "childmodelvers": 7, "model_vers": 7, "demo": 7, "childmodelwrapp": 7, "__init__": 7, "get_model": 7, "modeltyp": 7, "get_transcript_of_fil": 7, "audio_file_nam": 7, "transcrib": 7, "childbenchmark": 7, "version": 7, "valu": 7, "enum": 7, "avail": 7, "benchmark_n_sampl": 7, "benchmerk": 7, "For": [], "openai_api_kei": [0, 7], "openai_organ": [0, 7], "env": [0, 7], "existing_audio_id": 7, "whispervers": 7, "tini": 7, "choisen": 7, "arrai": 7, "whisperapivers": 7, "whisper_1": 7, "1": 7, "whisperapiwrapp": 7, "current": 7, "directori": [0, 7], "call": 7, "larg": 7, "medium": 7, "small": 7, "baseplot": 8, "ad": 8, "custom_plot": 8, "save_al": [0, 8], "basematplotlib": 8, "should": 8, "made": 8, "create_plot": 8, "figur": 8, "plotli": 8, "graph_obj": 8, "_figur": 8, "baseplotli": 8, "code": [1, 8], "gener": 8, "d": 8, "tale": 8, "launch_dtal": 8, "launch": 8, "webui": 8, "explor": 8, "loop": 8, "over": 8, "boxplotofmodelsw": 8, "sn": 8, "boxplot": 8, "x": 8, "y": 8, "fig": 8, "get_figur": 8, "save_plot": 8, "savefig": 8, "save_file_nam": 8, "demoplotlyexampl": 8, "px": 8, "gapmind": 8, "queri": 8, "countri": 8, "canada": 8, "line": 8, "year": 8, "lifeexp": 8, "titl": 8, "life": 8, "expect": 8, "boxplotofmodelsc": 8, "boxplotofmodelsm": 8, "boxplotofmodelswil": 8, "boxplotofmodelswip": 8, "meanofmetricbymodelnam": 8, "benchmark_results_2023_03_31_h_22_15": [], "speech2text": 5, "collect": 0, "how": 0, "txt": [0, 3], "content": 0, "python": 0, "script": 0, "sk": 0, "somemorerandomnumberlettersandmorerandomnessform": 0, "org": 0, "somerandomnumberandlett": 0, "100": 0, "benchmark_nam": 0, "exampl": [1, 3], "requir": 3, "In": 3, "rel": 3, "link": 3, "audiofil": 3, "follow": 3, "entri": 3, "20000_mijlen": 3, "20000_mijlen_0001": 3, "trancsript": 3, "benchmark_results_2023_04_03_h_16_39": 4}, "objects": {"speechtotext.benchmark": [[2, 0, 0, "-", "benchmarks"], [2, 0, 0, "-", "customBenchmarks"]], "speechtotext.benchmark.benchmarks": [[2, 1, 1, "", "Benchmark"], [2, 4, 1, "", "run_benchmarks"]], "speechtotext.benchmark.benchmarks.Benchmark": [[2, 2, 1, "id0", "BENCHMARK_SAMPLES"], [2, 2, 1, "id1", "DATASET"], [2, 3, 1, "", "convert_to_pandas"], [2, 3, 1, "", "create_models"], [2, 3, 1, "", "save_to_csv"], [2, 3, 1, "", "set_dataset"], [2, 3, 1, "", "update_samples"]], "speechtotext.benchmark.customBenchmarks": [[2, 1, 1, "", "WhisperAPIBenchmark"], [2, 1, 1, "", "WhisperBenchmark"]], "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark": [[2, 2, 1, "", "MODEL_BASE"], [2, 3, 1, "", "create_models"]], "speechtotext.benchmark.customBenchmarks.WhisperBenchmark": [[2, 2, 1, "", "MODEL_BASE"], [2, 3, 1, "", "create_models"]], "speechtotext": [[3, 0, 0, "-", "datasets"], [4, 0, 0, "-", "functions"]], "speechtotext.datasets": [[3, 1, 1, "", "Dataset"], [3, 1, 1, "", "DatasetBare"], [3, 1, 1, "", "SampleDataset"]], "speechtotext.datasets.Dataset": [[3, 3, 1, "", "get_n_samples"], [3, 3, 1, "", "load_transcript"]], "speechtotext.datasets.DatasetBare": [[3, 3, 1, "", "get_path_of_fragment"], [3, 3, 1, "", "get_text_of_id"], [3, 3, 1, "", "number_of_samples"]], "speechtotext.functions": [[4, 1, 1, "", "BaseResult"], [4, 2, 1, "", "REGEX_STRING_PARSE"], [4, 4, 1, "", "benchmark_results_to_csv"], [4, 4, 1, "", "force_cudnn_initialization"], [4, 4, 1, "", "join_benchmark_results"], [4, 4, 1, "", "multidispatch"], [4, 4, 1, "", "save_folder_name"], [4, 4, 1, "", "separate_benchmark_results_by_model"], [4, 4, 1, "", "string_cleaning"]], "speechtotext.functions.BaseResult": [[4, 3, 1, "", "save"]], "speechtotext.metric": [[6, 0, 0, "-", "customMetrics"], [6, 0, 0, "-", "metrics"]], "speechtotext.metric.customMetrics": [[6, 1, 1, "", "BaseMetrics"], [6, 1, 1, "", "BenchmarkResults"], [6, 1, 1, "", "DefaultMetrics"]], "speechtotext.metric.customMetrics.BaseMetrics": [[6, 3, 1, "", "create_df"], [6, 3, 1, "", "save"]], "speechtotext.metric.customMetrics.BenchmarkResults": [[6, 3, 1, "", "create_df"]], "speechtotext.metric.customMetrics.DefaultMetrics": [[6, 3, 1, "", "create_df"]], "speechtotext.metric.metrics": [[6, 1, 1, "", "Metrics"], [6, 4, 1, "", "notebook_metrics_print"]], "speechtotext.metric.metrics.Metrics": [[6, 2, 1, "", "cer"], [6, 2, 1, "", "mer"], [6, 2, 1, "", "wer"], [6, 2, 1, "", "wil"], [6, 2, 1, "", "wip"]], "speechtotext.model": [[7, 0, 0, "-", "modelWrapper"], [7, 0, 0, "-", "whisperWrapper"]], "speechtotext.model.modelWrapper": [[7, 1, 1, "", "ModelVersion"], [7, 1, 1, "", "ModelWrapper"]], "speechtotext.model.modelWrapper.ModelWrapper": [[7, 3, 1, "", "benchmark_n_samples"], [7, 3, 1, "", "benchmark_sample"], [7, 3, 1, "", "benchmark_samples"], [7, 3, 1, "", "get_model"], [7, 3, 1, "", "get_transcript_of_file"]], "speechtotext.model.whisperWrapper": [[7, 1, 1, "", "WhisperAPIVersion"], [7, 1, 1, "", "WhisperAPIWrapper"], [7, 1, 1, "", "WhisperVersion"], [7, 1, 1, "", "WhisperWrapper"]], "speechtotext.model.whisperWrapper.WhisperAPIVersion": [[7, 2, 1, "", "WHISPER_1"]], "speechtotext.model.whisperWrapper.WhisperAPIWrapper": [[7, 3, 1, "", "get_model"], [7, 3, 1, "", "get_transcript_of_file"]], "speechtotext.model.whisperWrapper.WhisperVersion": [[7, 2, 1, "", "BASE"], [7, 2, 1, "", "LARGE"], [7, 2, 1, "", "MEDIUM"], [7, 2, 1, "", "SMALL"], [7, 2, 1, "", "TINY"]], "speechtotext.model.whisperWrapper.WhisperWrapper": [[7, 3, 1, "", "get_model"], [7, 3, 1, "", "get_transcript_of_file"]], "speechtotext.plot": [[8, 0, 0, "-", "customPlots"], [8, 0, 0, "-", "plotting"]], "speechtotext.plot.customPlots": [[8, 1, 1, "", "BoxPlotOfModelsCer"], [8, 1, 1, "", "BoxPlotOfModelsMer"], [8, 1, 1, "", "BoxPlotOfModelsWer"], [8, 1, 1, "", "BoxPlotOfModelsWil"], [8, 1, 1, "", "BoxPlotOfModelsWip"], [8, 1, 1, "", "MeanOfMetricByModelname"]], "speechtotext.plot.customPlots.BoxPlotOfModelsCer": [[8, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsMer": [[8, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsWer": [[8, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsWil": [[8, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsWip": [[8, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.MeanOfMetricByModelname": [[8, 3, 1, "", "create_plot"]], "speechtotext.plot.plotting": [[8, 1, 1, "", "BaseMatPlotLib"], [8, 1, 1, "", "BasePlotly"], [8, 1, 1, "", "Plotting"]], "speechtotext.plot.plotting.BaseMatPlotLib": [[8, 3, 1, "", "create_plot"], [8, 3, 1, "", "save"]], "speechtotext.plot.plotting.BasePlotly": [[8, 3, 1, "", "create_plot"], [8, 3, 1, "", "save"]], "speechtotext.plot.plotting.Plotting": [[8, 2, 1, "", "CUSTOM_RESULTS"], [8, 3, 1, "", "launch_dtale"], [8, 3, 1, "", "save_all"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"welcom": 1, "speechtotext": [0, 1, 2, 3, 4, 5, 6, 7, 8], "": 1, "document": 1, "content": [1, 5], "indic": 1, "tabl": 1, "benchmark": 2, "packag": [0, 1, 2, 5, 6, 7, 8], "submodul": [2, 5, 6, 7, 8], "modul": [2, 3, 4, 6, 7, 8], "custombenchmark": 2, "dataset": 3, "function": 4, "metric": 6, "custommetr": 6, "model": 7, "modelwrapp": 7, "whisperwrapp": 7, "plot": 8, "customplot": 8, "code": 0, "exampl": 0, "requir": 0}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Code Examples for speechtotext package": [[0, "code-examples-for-speechtotext-package"]], "Requirements": [[0, "requirements"]], "Examples": [[0, "examples"]], "Welcome to speechtotext\u2019s documentation!": [[1, "welcome-to-speechtotext-s-documentation"]], "Package Contents:": [[1, null], [1, null]], "Indices and tables": [[1, "indices-and-tables"]], "speechtotext benchmark package": [[2, "speechtotext-benchmark-package"]], "Submodules": [[2, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"]], "benchmarks module": [[2, "module-speechtotext.benchmark.benchmarks"]], "customBenchmarks module": [[2, "module-speechtotext.benchmark.customBenchmarks"]], "Datasets": [[3, "datasets"]], "speechtotext.datasets module": [[3, "module-speechtotext.datasets"]], "Functions": [[4, "functions"]], "speechtotext.functions module": [[4, "module-speechtotext.functions"]], "Speechtotext package": [[5, "speechtotext-package"]], "Contents:": [[5, null]], "speechtotext metric package": [[6, "speechtotext-metric-package"]], "metrics module": [[6, "module-speechtotext.metric.metrics"]], "customMetrics module": [[6, "module-speechtotext.metric.customMetrics"]], "Speechtotext model package": [[7, "speechtotext-model-package"]], "speechtotext.model.modelWrapper module": [[7, "module-speechtotext.model.modelWrapper"]], "speechtotext.model.whisperWrapper module": [[7, "module-speechtotext.model.whisperWrapper"]], "speechtotext plot package": [[8, "speechtotext-plot-package"]], "plotting module": [[8, "module-speechtotext.plot.plotting"]], "customPlots module": [[8, "module-speechtotext.plot.customPlots"]]}, "indexentries": {"benchmark_samples (speechtotext.benchmark.benchmarks.benchmark attribute)": [[2, "id0"], [2, "speechtotext.benchmark.benchmarks.Benchmark.BENCHMARK_SAMPLES"]], "benchmark (class in speechtotext.benchmark.benchmarks)": [[2, "speechtotext.benchmark.benchmarks.Benchmark"]], "dataset (speechtotext.benchmark.benchmarks.benchmark attribute)": [[2, "id1"], [2, "speechtotext.benchmark.benchmarks.Benchmark.DATASET"]], "model_base (speechtotext.benchmark.custombenchmarks.whisperapibenchmark attribute)": [[2, "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark.MODEL_BASE"]], "model_base (speechtotext.benchmark.custombenchmarks.whisperbenchmark attribute)": [[2, "speechtotext.benchmark.customBenchmarks.WhisperBenchmark.MODEL_BASE"]], "whisperapibenchmark (class in speechtotext.benchmark.custombenchmarks)": [[2, "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark"]], "whisperbenchmark (class in speechtotext.benchmark.custombenchmarks)": [[2, "speechtotext.benchmark.customBenchmarks.WhisperBenchmark"]], "convert_to_pandas() (speechtotext.benchmark.benchmarks.benchmark method)": [[2, "speechtotext.benchmark.benchmarks.Benchmark.convert_to_pandas"]], "create_models() (speechtotext.benchmark.benchmarks.benchmark method)": [[2, "speechtotext.benchmark.benchmarks.Benchmark.create_models"]], "create_models() (speechtotext.benchmark.custombenchmarks.whisperapibenchmark method)": [[2, "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark.create_models"]], "create_models() (speechtotext.benchmark.custombenchmarks.whisperbenchmark method)": [[2, "speechtotext.benchmark.customBenchmarks.WhisperBenchmark.create_models"]], "module": [[2, "module-speechtotext.benchmark.benchmarks"], [2, "module-speechtotext.benchmark.customBenchmarks"], [3, "module-speechtotext.datasets"], [4, "module-speechtotext.functions"], [6, "module-speechtotext.metric.customMetrics"], [6, "module-speechtotext.metric.metrics"], [7, "module-speechtotext.model.modelWrapper"], [7, "module-speechtotext.model.whisperWrapper"], [8, "module-speechtotext.plot.customPlots"], [8, "module-speechtotext.plot.plotting"]], "run_benchmarks() (in module speechtotext.benchmark.benchmarks)": [[2, "speechtotext.benchmark.benchmarks.run_benchmarks"]], "save_to_csv() (speechtotext.benchmark.benchmarks.benchmark method)": [[2, "speechtotext.benchmark.benchmarks.Benchmark.save_to_csv"]], "set_dataset() (speechtotext.benchmark.benchmarks.benchmark class method)": [[2, "speechtotext.benchmark.benchmarks.Benchmark.set_dataset"]], "speechtotext.benchmark.benchmarks": [[2, "module-speechtotext.benchmark.benchmarks"]], "speechtotext.benchmark.custombenchmarks": [[2, "module-speechtotext.benchmark.customBenchmarks"]], "update_samples() (speechtotext.benchmark.benchmarks.benchmark class method)": [[2, "speechtotext.benchmark.benchmarks.Benchmark.update_samples"]], "dataset (class in speechtotext.datasets)": [[3, "speechtotext.datasets.Dataset"]], "datasetbare (class in speechtotext.datasets)": [[3, "speechtotext.datasets.DatasetBare"]], "sampledataset (class in speechtotext.datasets)": [[3, "speechtotext.datasets.SampleDataset"]], "get_n_samples() (speechtotext.datasets.dataset method)": [[3, "speechtotext.datasets.Dataset.get_n_samples"]], "get_path_of_fragment() (speechtotext.datasets.datasetbare method)": [[3, "speechtotext.datasets.DatasetBare.get_path_of_fragment"]], "get_text_of_id() (speechtotext.datasets.datasetbare method)": [[3, "speechtotext.datasets.DatasetBare.get_text_of_id"]], "load_transcript() (speechtotext.datasets.dataset method)": [[3, "speechtotext.datasets.Dataset.load_transcript"]], "number_of_samples() (speechtotext.datasets.datasetbare method)": [[3, "speechtotext.datasets.DatasetBare.number_of_samples"]], "speechtotext.datasets": [[3, "module-speechtotext.datasets"]], "baseresult (class in speechtotext.functions)": [[4, "speechtotext.functions.BaseResult"]], "regex_string_parse (in module speechtotext.functions)": [[4, "speechtotext.functions.REGEX_STRING_PARSE"]], "benchmark_results_to_csv() (in module speechtotext.functions)": [[4, "speechtotext.functions.benchmark_results_to_csv"]], "force_cudnn_initialization() (in module speechtotext.functions)": [[4, "speechtotext.functions.force_cudnn_initialization"]], "join_benchmark_results() (in module speechtotext.functions)": [[4, "speechtotext.functions.join_benchmark_results"]], "multidispatch() (in module speechtotext.functions)": [[4, "speechtotext.functions.multidispatch"]], "save() (speechtotext.functions.baseresult method)": [[4, "speechtotext.functions.BaseResult.save"]], "save_folder_name() (in module speechtotext.functions)": [[4, "speechtotext.functions.save_folder_name"]], "separate_benchmark_results_by_model() (in module speechtotext.functions)": [[4, "speechtotext.functions.separate_benchmark_results_by_model"]], "speechtotext.functions": [[4, "module-speechtotext.functions"]], "string_cleaning() (in module speechtotext.functions)": [[4, "speechtotext.functions.string_cleaning"]], "basemetrics (class in speechtotext.metric.custommetrics)": [[6, "speechtotext.metric.customMetrics.BaseMetrics"]], "benchmarkresults (class in speechtotext.metric.custommetrics)": [[6, "speechtotext.metric.customMetrics.BenchmarkResults"]], "defaultmetrics (class in speechtotext.metric.custommetrics)": [[6, "speechtotext.metric.customMetrics.DefaultMetrics"]], "metrics (class in speechtotext.metric.metrics)": [[6, "speechtotext.metric.metrics.Metrics"]], "cer (speechtotext.metric.metrics.metrics attribute)": [[6, "speechtotext.metric.metrics.Metrics.cer"]], "create_df() (speechtotext.metric.custommetrics.basemetrics method)": [[6, "speechtotext.metric.customMetrics.BaseMetrics.create_df"]], "create_df() (speechtotext.metric.custommetrics.benchmarkresults method)": [[6, "speechtotext.metric.customMetrics.BenchmarkResults.create_df"]], "create_df() (speechtotext.metric.custommetrics.defaultmetrics method)": [[6, "speechtotext.metric.customMetrics.DefaultMetrics.create_df"]], "mer (speechtotext.metric.metrics.metrics attribute)": [[6, "speechtotext.metric.metrics.Metrics.mer"]], "notebook_metrics_print() (in module speechtotext.metric.metrics)": [[6, "speechtotext.metric.metrics.notebook_metrics_print"]], "save() (speechtotext.metric.custommetrics.basemetrics method)": [[6, "speechtotext.metric.customMetrics.BaseMetrics.save"]], "speechtotext.metric.custommetrics": [[6, "module-speechtotext.metric.customMetrics"]], "speechtotext.metric.metrics": [[6, "module-speechtotext.metric.metrics"]], "wer (speechtotext.metric.metrics.metrics attribute)": [[6, "speechtotext.metric.metrics.Metrics.wer"]], "wil (speechtotext.metric.metrics.metrics attribute)": [[6, "speechtotext.metric.metrics.Metrics.wil"]], "wip (speechtotext.metric.metrics.metrics attribute)": [[6, "speechtotext.metric.metrics.Metrics.wip"]], "base (speechtotext.model.whisperwrapper.whisperversion attribute)": [[7, "speechtotext.model.whisperWrapper.WhisperVersion.BASE"]], "large (speechtotext.model.whisperwrapper.whisperversion attribute)": [[7, "speechtotext.model.whisperWrapper.WhisperVersion.LARGE"]], "medium (speechtotext.model.whisperwrapper.whisperversion attribute)": [[7, "speechtotext.model.whisperWrapper.WhisperVersion.MEDIUM"]], "modelversion (class in speechtotext.model.modelwrapper)": [[7, "speechtotext.model.modelWrapper.ModelVersion"]], "modelwrapper (class in speechtotext.model.modelwrapper)": [[7, "speechtotext.model.modelWrapper.ModelWrapper"]], "small (speechtotext.model.whisperwrapper.whisperversion attribute)": [[7, "speechtotext.model.whisperWrapper.WhisperVersion.SMALL"]], "tiny (speechtotext.model.whisperwrapper.whisperversion attribute)": [[7, "speechtotext.model.whisperWrapper.WhisperVersion.TINY"]], "whisper_1 (speechtotext.model.whisperwrapper.whisperapiversion attribute)": [[7, "speechtotext.model.whisperWrapper.WhisperAPIVersion.WHISPER_1"]], "whisperapiversion (class in speechtotext.model.whisperwrapper)": [[7, "speechtotext.model.whisperWrapper.WhisperAPIVersion"]], "whisperapiwrapper (class in speechtotext.model.whisperwrapper)": [[7, "speechtotext.model.whisperWrapper.WhisperAPIWrapper"]], "whisperversion (class in speechtotext.model.whisperwrapper)": [[7, "speechtotext.model.whisperWrapper.WhisperVersion"]], "whisperwrapper (class in speechtotext.model.whisperwrapper)": [[7, "speechtotext.model.whisperWrapper.WhisperWrapper"]], "benchmark_n_samples() (speechtotext.model.modelwrapper.modelwrapper method)": [[7, "speechtotext.model.modelWrapper.ModelWrapper.benchmark_n_samples"]], "benchmark_sample() (speechtotext.model.modelwrapper.modelwrapper method)": [[7, "speechtotext.model.modelWrapper.ModelWrapper.benchmark_sample"]], "benchmark_samples() (speechtotext.model.modelwrapper.modelwrapper method)": [[7, "speechtotext.model.modelWrapper.ModelWrapper.benchmark_samples"]], "get_model() (speechtotext.model.modelwrapper.modelwrapper method)": [[7, "speechtotext.model.modelWrapper.ModelWrapper.get_model"]], "get_model() (speechtotext.model.whisperwrapper.whisperapiwrapper method)": [[7, "speechtotext.model.whisperWrapper.WhisperAPIWrapper.get_model"]], "get_model() (speechtotext.model.whisperwrapper.whisperwrapper method)": [[7, "speechtotext.model.whisperWrapper.WhisperWrapper.get_model"]], "get_transcript_of_file() (speechtotext.model.modelwrapper.modelwrapper method)": [[7, "speechtotext.model.modelWrapper.ModelWrapper.get_transcript_of_file"]], "get_transcript_of_file() (speechtotext.model.whisperwrapper.whisperapiwrapper method)": [[7, "speechtotext.model.whisperWrapper.WhisperAPIWrapper.get_transcript_of_file"]], "get_transcript_of_file() (speechtotext.model.whisperwrapper.whisperwrapper method)": [[7, "speechtotext.model.whisperWrapper.WhisperWrapper.get_transcript_of_file"]], "speechtotext.model.modelwrapper": [[7, "module-speechtotext.model.modelWrapper"]], "speechtotext.model.whisperwrapper": [[7, "module-speechtotext.model.whisperWrapper"]], "basematplotlib (class in speechtotext.plot.plotting)": [[8, "speechtotext.plot.plotting.BaseMatPlotLib"]], "baseplotly (class in speechtotext.plot.plotting)": [[8, "speechtotext.plot.plotting.BasePlotly"]], "boxplotofmodelscer (class in speechtotext.plot.customplots)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsCer"]], "boxplotofmodelsmer (class in speechtotext.plot.customplots)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsMer"]], "boxplotofmodelswer (class in speechtotext.plot.customplots)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsWer"]], "boxplotofmodelswil (class in speechtotext.plot.customplots)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsWil"]], "boxplotofmodelswip (class in speechtotext.plot.customplots)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsWip"]], "custom_results (speechtotext.plot.plotting.plotting attribute)": [[8, "speechtotext.plot.plotting.Plotting.CUSTOM_RESULTS"]], "meanofmetricbymodelname (class in speechtotext.plot.customplots)": [[8, "speechtotext.plot.customPlots.MeanOfMetricByModelname"]], "plotting (class in speechtotext.plot.plotting)": [[8, "speechtotext.plot.plotting.Plotting"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelscer method)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsCer.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelsmer method)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsMer.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelswer method)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsWer.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelswil method)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsWil.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelswip method)": [[8, "speechtotext.plot.customPlots.BoxPlotOfModelsWip.create_plot"]], "create_plot() (speechtotext.plot.customplots.meanofmetricbymodelname method)": [[8, "speechtotext.plot.customPlots.MeanOfMetricByModelname.create_plot"]], "create_plot() (speechtotext.plot.plotting.basematplotlib method)": [[8, "speechtotext.plot.plotting.BaseMatPlotLib.create_plot"]], "create_plot() (speechtotext.plot.plotting.baseplotly method)": [[8, "speechtotext.plot.plotting.BasePlotly.create_plot"]], "launch_dtale() (speechtotext.plot.plotting.plotting method)": [[8, "speechtotext.plot.plotting.Plotting.launch_dtale"]], "save() (speechtotext.plot.plotting.basematplotlib method)": [[8, "speechtotext.plot.plotting.BaseMatPlotLib.save"]], "save() (speechtotext.plot.plotting.baseplotly method)": [[8, "speechtotext.plot.plotting.BasePlotly.save"]], "save_all() (speechtotext.plot.plotting.plotting method)": [[8, "speechtotext.plot.plotting.Plotting.save_all"]], "speechtotext.plot.customplots": [[8, "module-speechtotext.plot.customPlots"]], "speechtotext.plot.plotting": [[8, "module-speechtotext.plot.plotting"]]}})