Search.setIndex({"docnames": ["index", "speechtotext/benchmark/index", "speechtotext/datasets", "speechtotext/functions", "speechtotext/index", "speechtotext/metric/index", "speechtotext/model/index", "speechtotext/plot/index"], "filenames": ["index.rst", "speechtotext/benchmark/index.rst", "speechtotext/datasets.rst", "speechtotext/functions.rst", "speechtotext/index.rst", "speechtotext/metric/index.rst", "speechtotext/model/index.rst", "speechtotext/plot/index.rst"], "titles": ["Welcome to speechtotext\u2019s documentation!", "speechtotext benchmark package", "Datasets", "Functions", "Speechtotext package", "speechtotext metric package", "Speechtotext model package", "speechtotext plot package"], "terms": {"packag": [0, 2, 3], "submodul": 0, "model": [0, 1, 3, 4, 5, 7], "modelwrapp": [0, 1], "modul": [0, 4], "whisperwrapp": 0, "benchmark": [0, 2, 3, 5, 6, 7], "custombenchmark": 0, "plot": [0, 5], "customplot": 0, "metric": [0, 1, 6, 7], "custommetr": [0, 7], "index": [0, 3], "search": 0, "page": 0, "us": [1, 2, 3, 4, 5, 6, 7], "thi": [1, 2, 3, 4, 5, 6, 7], "like": [1, 2, 3, 5, 6, 7], "import": [1, 2, 3, 5, 6, 7], "from": [1, 2, 3, 5, 6, 7], "dataset": [1, 4, 5, 6], "set": [1, 2, 3, 6], "number_of_sampl": [1, 2, 6], "10": [1, 2, 6], "path_to_dir": [1, 2, 6], "path": [1, 2, 3, 6], "dir": [1, 2, 6], "name": [1, 2, 3, 6], "dataset_nam": [1, 2, 6], "set_dataset": [1, 6], "creat": [1, 2, 3, 5, 6, 7], "wb": 1, "whisperbenchmark": 1, "run": [1, 6], "convert": 1, "panda": [1, 3, 7], "datafram": [1, 2, 3, 5, 7], "df": [1, 2, 3, 5, 7], "convert_to_panda": 1, "print": [1, 2, 5], "save": [1, 3, 5, 7], "csv": [1, 3], "datetim": 1, "benchmark_results_to_csv": [1, 3], "5": 1, "wapib": 1, "whisperapibenchmark": 1, "benchmark_dataset": 1, "dataset_rdh": 1, "benchmark_list": 1, "list": [1, 3, 6, 7], "result": [1, 3, 5, 6, 7], "run_benchmark": 1, "class": [1, 2, 3, 5, 6, 7], "with_clean": [1, 5, 6], "true": [1, 3, 5, 6], "base": [1, 2, 3, 5, 6, 7], "abc": [1, 3, 6], "i": [1, 4, 7], "test": [1, 4], "valid": [1, 3, 4], "an": [1, 7], "parent": [1, 6, 7], "all": [1, 3, 7], "benchmark_sampl": [1, 6], "just": 1, "sampl": [1, 2, 6], "share": 1, "child": [1, 6, 7], "type": [1, 2, 3, 5, 6, 7], "sampledataset": [1, 2, 6], "none": 1, "return": [1, 2, 3, 5, 6, 7], "pd": [1, 3, 5], "core": [1, 3, 5, 7], "frame": [1, 3, 5, 7], "abstract": [1, 3, 5, 6, 7], "create_model": [1, 6], "wrapper": [1, 6], "save_to_csv": 1, "save_nam": [1, 3], "str": [1, 2, 3, 5, 6, 7], "output": [1, 3], "paramet": [1, 2, 3, 5, 6], "filenam": [1, 3], "classmethod": 1, "update_sampl": 1, "int": [1, 2, 6], "updat": 1, "number": [1, 2, 6], "al": 1, "out": 1, "api": [1, 6], "whisper": [1, 6], "model_bas": [1, 6], "whisperapi": 1, "local": [1, 6], "id": [2, 5, 6], "existing_id": 2, "get": [2, 6], "audio": [2, 5, 6], "file": [2, 5, 6], "get_path_of_frag": 2, "transcript": [2, 3, 5, 6], "get_text_of_id": 2, "n": [2, 6], "trandom": 2, "dataset_n_random": 2, "get_n_sampl": 2, "file_ext": 2, "wav": 2, "datasetbar": 2, "extract": 2, "data": [2, 7], "folder": [2, 3, 5, 7], "random": [2, 6], "load_transcript": 2, "load": 2, "object": [2, 5, 7], "bare": 2, "fragment": 2, "rais": 2, "filenotfounderror": 2, "doesn": 2, "t": 2, "exist": 2, "text": [2, 3, 6], "string": [2, 3], "spoken": 2, "forc": 3, "torch": 3, "cuda": 3, "force_cudnn_initi": 3, "clean": [3, 6], "string_clean": 3, "ha": 3, "8": 3, "regex_string_pars": 3, "regex": 3, "parc": 3, "up": 3, "ar": [3, 7], "baseresult": [3, 5, 7], "report_fold": [3, 5, 7], "file_nam": [3, 5, 7], "report": [3, 5], "benchmark_results_2023_03_31_h_08_34": [], "option": [3, 6], "default": [3, 5, 6], "default_csv_nam": 3, "join_benchmark_result": 3, "set_index": 3, "join": 3, "bool": [3, 6], "model_nam": [3, 6, 7], "audio_id": [3, 5], "can": [3, 7], "multidispatch": 3, "allow": 3, "method": 3, "overload": 3, "save_folder_nam": 3, "report_nam": [3, 7], "folder_nam": 3, "make": 3, "default_report_fold": 3, "separate_benchmark_results_by_model": 3, "dict": 3, "seper": 3, "each": [3, 6], "stt": 3, "unclean": 3, "function": [4, 5, 7], "calcul": 5, "m": 5, "de": 5, "stoel": 5, "heeft": 5, "krassen": 5, "gemaakt": 5, "op": 5, "vloer": 5, "id_from_dataset": 5, "refer": 5, "hypothesi": 5, "calul": 5, "attribut": 5, "class_attribut": 5, "The": 5, "wer": [5, 7], "word": 5, "error": 5, "rate": 5, "float": 5, "mer": [5, 7], "match": 5, "wil": [5, 7], "inform": 5, "lost": 5, "wip": [5, 7], "preserv": 5, "cer": [5, 7], "charact": 5, "notebook_metrics_print": 5, "custom": [5, 7], "matplotlib": [5, 7], "pictur": [5, 7], "benchmarkresult": [5, 7], "basemetr": 5, "def": [5, 6, 7], "create_df": 5, "self": [5, 6, 7], "add": [5, 7], "custom_result": [5, 7], "append": [5, 6, 7], "need": [5, 6, 7], "defaultmetr": [5, 7], "statist": 5, "implement": 6, "modulewrapp": 6, "modelvers": 6, "childmodelvers": 6, "model_vers": 6, "demo": 6, "childmodelwrapp": 6, "__init__": 6, "get_model": 6, "modeltyp": 6, "get_transcript_of_fil": 6, "audio_file_nam": 6, "transcrib": 6, "childbenchmark": 6, "version": 6, "valu": 6, "enum": 6, "avail": 6, "benchmark_n_sampl": 6, "benchmerk": 6, "For": 6, "openai_api_kei": 6, "openai_organ": 6, "env": 6, "existing_audio_id": 6, "whispervers": 6, "tini": 6, "choisen": 6, "arrai": 6, "whisperapivers": 6, "whisper_1": 6, "1": 6, "whisperapiwrapp": 6, "current": 6, "directori": 6, "call": 6, "larg": 6, "medium": 6, "small": 6, "baseplot": 7, "ad": 7, "custom_plot": 7, "save_al": 7, "basematplotlib": 7, "should": 7, "made": 7, "create_plot": 7, "figur": 7, "plotli": 7, "graph_obj": 7, "_figur": 7, "baseplotli": 7, "code": 7, "gener": 7, "d": 7, "tale": 7, "launch_dtal": 7, "launch": 7, "webui": 7, "explor": 7, "loop": 7, "over": 7, "boxplotofmodelsw": 7, "sn": 7, "boxplot": 7, "x": 7, "y": 7, "fig": 7, "get_figur": 7, "save_plot": 7, "savefig": 7, "save_file_nam": 7, "demoplotlyexampl": 7, "px": 7, "gapmind": 7, "queri": 7, "countri": 7, "canada": 7, "line": 7, "year": 7, "lifeexp": 7, "titl": 7, "life": 7, "expect": 7, "boxplotofmodelsc": 7, "boxplotofmodelsm": 7, "boxplotofmodelswil": 7, "boxplotofmodelswip": 7, "meanofmetricbymodelnam": 7, "benchmark_results_2023_03_31_h_22_15": 3, "speech2text": 4}, "objects": {"speechtotext.benchmark": [[1, 0, 0, "-", "benchmarks"], [1, 0, 0, "-", "customBenchmarks"]], "speechtotext.benchmark.benchmarks": [[1, 1, 1, "", "Benchmark"], [1, 4, 1, "", "run_benchmarks"]], "speechtotext.benchmark.benchmarks.Benchmark": [[1, 2, 1, "id0", "BENCHMARK_SAMPLES"], [1, 2, 1, "id1", "DATASET"], [1, 3, 1, "", "convert_to_pandas"], [1, 3, 1, "", "create_models"], [1, 3, 1, "", "save_to_csv"], [1, 3, 1, "", "set_dataset"], [1, 3, 1, "", "update_samples"]], "speechtotext.benchmark.customBenchmarks": [[1, 1, 1, "", "WhisperAPIBenchmark"], [1, 1, 1, "", "WhisperBenchmark"]], "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark": [[1, 2, 1, "", "MODEL_BASE"], [1, 3, 1, "", "create_models"]], "speechtotext.benchmark.customBenchmarks.WhisperBenchmark": [[1, 2, 1, "", "MODEL_BASE"], [1, 3, 1, "", "create_models"]], "speechtotext": [[2, 0, 0, "-", "datasets"], [3, 0, 0, "-", "functions"]], "speechtotext.datasets": [[2, 1, 1, "", "Dataset"], [2, 1, 1, "", "DatasetBare"], [2, 1, 1, "", "SampleDataset"]], "speechtotext.datasets.Dataset": [[2, 3, 1, "", "get_n_samples"], [2, 3, 1, "", "load_transcript"]], "speechtotext.datasets.DatasetBare": [[2, 3, 1, "", "get_path_of_fragment"], [2, 3, 1, "", "get_text_of_id"], [2, 3, 1, "", "number_of_samples"]], "speechtotext.functions": [[3, 1, 1, "", "BaseResult"], [3, 2, 1, "", "REGEX_STRING_PARSE"], [3, 4, 1, "", "benchmark_results_to_csv"], [3, 4, 1, "", "force_cudnn_initialization"], [3, 4, 1, "", "join_benchmark_results"], [3, 4, 1, "", "multidispatch"], [3, 4, 1, "", "save_folder_name"], [3, 4, 1, "", "separate_benchmark_results_by_model"], [3, 4, 1, "", "string_cleaning"]], "speechtotext.functions.BaseResult": [[3, 3, 1, "", "save"]], "speechtotext.metric": [[5, 0, 0, "-", "customMetrics"], [5, 0, 0, "-", "metrics"]], "speechtotext.metric.customMetrics": [[5, 1, 1, "", "BaseMetrics"], [5, 1, 1, "", "BenchmarkResults"], [5, 1, 1, "", "DefaultMetrics"]], "speechtotext.metric.customMetrics.BaseMetrics": [[5, 3, 1, "", "create_df"], [5, 3, 1, "", "save"]], "speechtotext.metric.customMetrics.BenchmarkResults": [[5, 3, 1, "", "create_df"]], "speechtotext.metric.customMetrics.DefaultMetrics": [[5, 3, 1, "", "create_df"]], "speechtotext.metric.metrics": [[5, 1, 1, "", "Metrics"], [5, 4, 1, "", "notebook_metrics_print"]], "speechtotext.metric.metrics.Metrics": [[5, 2, 1, "", "cer"], [5, 2, 1, "", "mer"], [5, 2, 1, "", "wer"], [5, 2, 1, "", "wil"], [5, 2, 1, "", "wip"]], "speechtotext.model": [[6, 0, 0, "-", "modelWrapper"], [6, 0, 0, "-", "whisperWrapper"]], "speechtotext.model.modelWrapper": [[6, 1, 1, "", "ModelVersion"], [6, 1, 1, "", "ModelWrapper"]], "speechtotext.model.modelWrapper.ModelWrapper": [[6, 3, 1, "", "benchmark_n_samples"], [6, 3, 1, "", "benchmark_sample"], [6, 3, 1, "", "benchmark_samples"], [6, 3, 1, "", "get_model"], [6, 3, 1, "", "get_transcript_of_file"]], "speechtotext.model.whisperWrapper": [[6, 1, 1, "", "WhisperAPIVersion"], [6, 1, 1, "", "WhisperAPIWrapper"], [6, 1, 1, "", "WhisperVersion"], [6, 1, 1, "", "WhisperWrapper"]], "speechtotext.model.whisperWrapper.WhisperAPIVersion": [[6, 2, 1, "", "WHISPER_1"]], "speechtotext.model.whisperWrapper.WhisperAPIWrapper": [[6, 3, 1, "", "get_model"], [6, 3, 1, "", "get_transcript_of_file"]], "speechtotext.model.whisperWrapper.WhisperVersion": [[6, 2, 1, "", "BASE"], [6, 2, 1, "", "LARGE"], [6, 2, 1, "", "MEDIUM"], [6, 2, 1, "", "SMALL"], [6, 2, 1, "", "TINY"]], "speechtotext.model.whisperWrapper.WhisperWrapper": [[6, 3, 1, "", "get_model"], [6, 3, 1, "", "get_transcript_of_file"]], "speechtotext.plot": [[7, 0, 0, "-", "customPlots"], [7, 0, 0, "-", "plotting"]], "speechtotext.plot.customPlots": [[7, 1, 1, "", "BoxPlotOfModelsCer"], [7, 1, 1, "", "BoxPlotOfModelsMer"], [7, 1, 1, "", "BoxPlotOfModelsWer"], [7, 1, 1, "", "BoxPlotOfModelsWil"], [7, 1, 1, "", "BoxPlotOfModelsWip"], [7, 1, 1, "", "MeanOfMetricByModelname"]], "speechtotext.plot.customPlots.BoxPlotOfModelsCer": [[7, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsMer": [[7, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsWer": [[7, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsWil": [[7, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.BoxPlotOfModelsWip": [[7, 3, 1, "", "create_plot"]], "speechtotext.plot.customPlots.MeanOfMetricByModelname": [[7, 3, 1, "", "create_plot"]], "speechtotext.plot.plotting": [[7, 1, 1, "", "BaseMatPlotLib"], [7, 1, 1, "", "BasePlotly"], [7, 1, 1, "", "Plotting"]], "speechtotext.plot.plotting.BaseMatPlotLib": [[7, 3, 1, "", "create_plot"], [7, 3, 1, "", "save"]], "speechtotext.plot.plotting.BasePlotly": [[7, 3, 1, "", "create_plot"], [7, 3, 1, "", "save"]], "speechtotext.plot.plotting.Plotting": [[7, 2, 1, "", "CUSTOM_RESULTS"], [7, 3, 1, "", "launch_dtale"], [7, 3, 1, "", "save_all"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"welcom": 0, "speechtotext": [0, 1, 2, 3, 4, 5, 6, 7], "": 0, "document": 0, "content": [0, 4], "indic": 0, "tabl": 0, "benchmark": 1, "packag": [1, 4, 5, 6, 7], "submodul": [1, 4, 5, 6, 7], "modul": [1, 2, 3, 5, 6, 7], "custombenchmark": 1, "dataset": 2, "function": 3, "metric": 5, "custommetr": 5, "model": 6, "modelwrapp": 6, "whisperwrapp": 6, "plot": 7, "customplot": 7}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Welcome to speechtotext\u2019s documentation!": [[0, "welcome-to-speechtotext-s-documentation"]], "Contents:": [[0, null], [4, null]], "Indices and tables": [[0, "indices-and-tables"]], "speechtotext benchmark package": [[1, "speechtotext-benchmark-package"]], "Submodules": [[1, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"]], "benchmarks module": [[1, "module-speechtotext.benchmark.benchmarks"]], "customBenchmarks module": [[1, "module-speechtotext.benchmark.customBenchmarks"]], "Datasets": [[2, "datasets"]], "speechtotext.datasets module": [[2, "module-speechtotext.datasets"]], "Functions": [[3, "functions"]], "speechtotext.functions module": [[3, "module-speechtotext.functions"]], "Speechtotext package": [[4, "speechtotext-package"]], "speechtotext metric package": [[5, "speechtotext-metric-package"]], "metrics module": [[5, "module-speechtotext.metric.metrics"]], "customMetrics module": [[5, "module-speechtotext.metric.customMetrics"]], "Speechtotext model package": [[6, "speechtotext-model-package"]], "speechtotext.model.modelWrapper module": [[6, "module-speechtotext.model.modelWrapper"]], "speechtotext.model.whisperWrapper module": [[6, "module-speechtotext.model.whisperWrapper"]], "speechtotext plot package": [[7, "speechtotext-plot-package"]], "plotting module": [[7, "module-speechtotext.plot.plotting"]], "customPlots module": [[7, "module-speechtotext.plot.customPlots"]]}, "indexentries": {"benchmark_samples (speechtotext.benchmark.benchmarks.benchmark attribute)": [[1, "id0"], [1, "speechtotext.benchmark.benchmarks.Benchmark.BENCHMARK_SAMPLES"]], "benchmark (class in speechtotext.benchmark.benchmarks)": [[1, "speechtotext.benchmark.benchmarks.Benchmark"]], "dataset (speechtotext.benchmark.benchmarks.benchmark attribute)": [[1, "id1"], [1, "speechtotext.benchmark.benchmarks.Benchmark.DATASET"]], "model_base (speechtotext.benchmark.custombenchmarks.whisperapibenchmark attribute)": [[1, "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark.MODEL_BASE"]], "model_base (speechtotext.benchmark.custombenchmarks.whisperbenchmark attribute)": [[1, "speechtotext.benchmark.customBenchmarks.WhisperBenchmark.MODEL_BASE"]], "whisperapibenchmark (class in speechtotext.benchmark.custombenchmarks)": [[1, "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark"]], "whisperbenchmark (class in speechtotext.benchmark.custombenchmarks)": [[1, "speechtotext.benchmark.customBenchmarks.WhisperBenchmark"]], "convert_to_pandas() (speechtotext.benchmark.benchmarks.benchmark method)": [[1, "speechtotext.benchmark.benchmarks.Benchmark.convert_to_pandas"]], "create_models() (speechtotext.benchmark.benchmarks.benchmark method)": [[1, "speechtotext.benchmark.benchmarks.Benchmark.create_models"]], "create_models() (speechtotext.benchmark.custombenchmarks.whisperapibenchmark method)": [[1, "speechtotext.benchmark.customBenchmarks.WhisperAPIBenchmark.create_models"]], "create_models() (speechtotext.benchmark.custombenchmarks.whisperbenchmark method)": [[1, "speechtotext.benchmark.customBenchmarks.WhisperBenchmark.create_models"]], "module": [[1, "module-speechtotext.benchmark.benchmarks"], [1, "module-speechtotext.benchmark.customBenchmarks"], [2, "module-speechtotext.datasets"], [3, "module-speechtotext.functions"], [5, "module-speechtotext.metric.customMetrics"], [5, "module-speechtotext.metric.metrics"], [6, "module-speechtotext.model.modelWrapper"], [6, "module-speechtotext.model.whisperWrapper"], [7, "module-speechtotext.plot.customPlots"], [7, "module-speechtotext.plot.plotting"]], "run_benchmarks() (in module speechtotext.benchmark.benchmarks)": [[1, "speechtotext.benchmark.benchmarks.run_benchmarks"]], "save_to_csv() (speechtotext.benchmark.benchmarks.benchmark method)": [[1, "speechtotext.benchmark.benchmarks.Benchmark.save_to_csv"]], "set_dataset() (speechtotext.benchmark.benchmarks.benchmark class method)": [[1, "speechtotext.benchmark.benchmarks.Benchmark.set_dataset"]], "speechtotext.benchmark.benchmarks": [[1, "module-speechtotext.benchmark.benchmarks"]], "speechtotext.benchmark.custombenchmarks": [[1, "module-speechtotext.benchmark.customBenchmarks"]], "update_samples() (speechtotext.benchmark.benchmarks.benchmark class method)": [[1, "speechtotext.benchmark.benchmarks.Benchmark.update_samples"]], "dataset (class in speechtotext.datasets)": [[2, "speechtotext.datasets.Dataset"]], "datasetbare (class in speechtotext.datasets)": [[2, "speechtotext.datasets.DatasetBare"]], "sampledataset (class in speechtotext.datasets)": [[2, "speechtotext.datasets.SampleDataset"]], "get_n_samples() (speechtotext.datasets.dataset method)": [[2, "speechtotext.datasets.Dataset.get_n_samples"]], "get_path_of_fragment() (speechtotext.datasets.datasetbare method)": [[2, "speechtotext.datasets.DatasetBare.get_path_of_fragment"]], "get_text_of_id() (speechtotext.datasets.datasetbare method)": [[2, "speechtotext.datasets.DatasetBare.get_text_of_id"]], "load_transcript() (speechtotext.datasets.dataset method)": [[2, "speechtotext.datasets.Dataset.load_transcript"]], "number_of_samples() (speechtotext.datasets.datasetbare method)": [[2, "speechtotext.datasets.DatasetBare.number_of_samples"]], "speechtotext.datasets": [[2, "module-speechtotext.datasets"]], "baseresult (class in speechtotext.functions)": [[3, "speechtotext.functions.BaseResult"]], "regex_string_parse (in module speechtotext.functions)": [[3, "speechtotext.functions.REGEX_STRING_PARSE"]], "benchmark_results_to_csv() (in module speechtotext.functions)": [[3, "speechtotext.functions.benchmark_results_to_csv"]], "force_cudnn_initialization() (in module speechtotext.functions)": [[3, "speechtotext.functions.force_cudnn_initialization"]], "join_benchmark_results() (in module speechtotext.functions)": [[3, "speechtotext.functions.join_benchmark_results"]], "multidispatch() (in module speechtotext.functions)": [[3, "speechtotext.functions.multidispatch"]], "save() (speechtotext.functions.baseresult method)": [[3, "speechtotext.functions.BaseResult.save"]], "save_folder_name() (in module speechtotext.functions)": [[3, "speechtotext.functions.save_folder_name"]], "separate_benchmark_results_by_model() (in module speechtotext.functions)": [[3, "speechtotext.functions.separate_benchmark_results_by_model"]], "speechtotext.functions": [[3, "module-speechtotext.functions"]], "string_cleaning() (in module speechtotext.functions)": [[3, "speechtotext.functions.string_cleaning"]], "basemetrics (class in speechtotext.metric.custommetrics)": [[5, "speechtotext.metric.customMetrics.BaseMetrics"]], "benchmarkresults (class in speechtotext.metric.custommetrics)": [[5, "speechtotext.metric.customMetrics.BenchmarkResults"]], "defaultmetrics (class in speechtotext.metric.custommetrics)": [[5, "speechtotext.metric.customMetrics.DefaultMetrics"]], "metrics (class in speechtotext.metric.metrics)": [[5, "speechtotext.metric.metrics.Metrics"]], "cer (speechtotext.metric.metrics.metrics attribute)": [[5, "speechtotext.metric.metrics.Metrics.cer"]], "create_df() (speechtotext.metric.custommetrics.basemetrics method)": [[5, "speechtotext.metric.customMetrics.BaseMetrics.create_df"]], "create_df() (speechtotext.metric.custommetrics.benchmarkresults method)": [[5, "speechtotext.metric.customMetrics.BenchmarkResults.create_df"]], "create_df() (speechtotext.metric.custommetrics.defaultmetrics method)": [[5, "speechtotext.metric.customMetrics.DefaultMetrics.create_df"]], "mer (speechtotext.metric.metrics.metrics attribute)": [[5, "speechtotext.metric.metrics.Metrics.mer"]], "notebook_metrics_print() (in module speechtotext.metric.metrics)": [[5, "speechtotext.metric.metrics.notebook_metrics_print"]], "save() (speechtotext.metric.custommetrics.basemetrics method)": [[5, "speechtotext.metric.customMetrics.BaseMetrics.save"]], "speechtotext.metric.custommetrics": [[5, "module-speechtotext.metric.customMetrics"]], "speechtotext.metric.metrics": [[5, "module-speechtotext.metric.metrics"]], "wer (speechtotext.metric.metrics.metrics attribute)": [[5, "speechtotext.metric.metrics.Metrics.wer"]], "wil (speechtotext.metric.metrics.metrics attribute)": [[5, "speechtotext.metric.metrics.Metrics.wil"]], "wip (speechtotext.metric.metrics.metrics attribute)": [[5, "speechtotext.metric.metrics.Metrics.wip"]], "base (speechtotext.model.whisperwrapper.whisperversion attribute)": [[6, "speechtotext.model.whisperWrapper.WhisperVersion.BASE"]], "large (speechtotext.model.whisperwrapper.whisperversion attribute)": [[6, "speechtotext.model.whisperWrapper.WhisperVersion.LARGE"]], "medium (speechtotext.model.whisperwrapper.whisperversion attribute)": [[6, "speechtotext.model.whisperWrapper.WhisperVersion.MEDIUM"]], "modelversion (class in speechtotext.model.modelwrapper)": [[6, "speechtotext.model.modelWrapper.ModelVersion"]], "modelwrapper (class in speechtotext.model.modelwrapper)": [[6, "speechtotext.model.modelWrapper.ModelWrapper"]], "small (speechtotext.model.whisperwrapper.whisperversion attribute)": [[6, "speechtotext.model.whisperWrapper.WhisperVersion.SMALL"]], "tiny (speechtotext.model.whisperwrapper.whisperversion attribute)": [[6, "speechtotext.model.whisperWrapper.WhisperVersion.TINY"]], "whisper_1 (speechtotext.model.whisperwrapper.whisperapiversion attribute)": [[6, "speechtotext.model.whisperWrapper.WhisperAPIVersion.WHISPER_1"]], "whisperapiversion (class in speechtotext.model.whisperwrapper)": [[6, "speechtotext.model.whisperWrapper.WhisperAPIVersion"]], "whisperapiwrapper (class in speechtotext.model.whisperwrapper)": [[6, "speechtotext.model.whisperWrapper.WhisperAPIWrapper"]], "whisperversion (class in speechtotext.model.whisperwrapper)": [[6, "speechtotext.model.whisperWrapper.WhisperVersion"]], "whisperwrapper (class in speechtotext.model.whisperwrapper)": [[6, "speechtotext.model.whisperWrapper.WhisperWrapper"]], "benchmark_n_samples() (speechtotext.model.modelwrapper.modelwrapper method)": [[6, "speechtotext.model.modelWrapper.ModelWrapper.benchmark_n_samples"]], "benchmark_sample() (speechtotext.model.modelwrapper.modelwrapper method)": [[6, "speechtotext.model.modelWrapper.ModelWrapper.benchmark_sample"]], "benchmark_samples() (speechtotext.model.modelwrapper.modelwrapper method)": [[6, "speechtotext.model.modelWrapper.ModelWrapper.benchmark_samples"]], "get_model() (speechtotext.model.modelwrapper.modelwrapper method)": [[6, "speechtotext.model.modelWrapper.ModelWrapper.get_model"]], "get_model() (speechtotext.model.whisperwrapper.whisperapiwrapper method)": [[6, "speechtotext.model.whisperWrapper.WhisperAPIWrapper.get_model"]], "get_model() (speechtotext.model.whisperwrapper.whisperwrapper method)": [[6, "speechtotext.model.whisperWrapper.WhisperWrapper.get_model"]], "get_transcript_of_file() (speechtotext.model.modelwrapper.modelwrapper method)": [[6, "speechtotext.model.modelWrapper.ModelWrapper.get_transcript_of_file"]], "get_transcript_of_file() (speechtotext.model.whisperwrapper.whisperapiwrapper method)": [[6, "speechtotext.model.whisperWrapper.WhisperAPIWrapper.get_transcript_of_file"]], "get_transcript_of_file() (speechtotext.model.whisperwrapper.whisperwrapper method)": [[6, "speechtotext.model.whisperWrapper.WhisperWrapper.get_transcript_of_file"]], "speechtotext.model.modelwrapper": [[6, "module-speechtotext.model.modelWrapper"]], "speechtotext.model.whisperwrapper": [[6, "module-speechtotext.model.whisperWrapper"]], "basematplotlib (class in speechtotext.plot.plotting)": [[7, "speechtotext.plot.plotting.BaseMatPlotLib"]], "baseplotly (class in speechtotext.plot.plotting)": [[7, "speechtotext.plot.plotting.BasePlotly"]], "boxplotofmodelscer (class in speechtotext.plot.customplots)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsCer"]], "boxplotofmodelsmer (class in speechtotext.plot.customplots)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsMer"]], "boxplotofmodelswer (class in speechtotext.plot.customplots)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsWer"]], "boxplotofmodelswil (class in speechtotext.plot.customplots)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsWil"]], "boxplotofmodelswip (class in speechtotext.plot.customplots)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsWip"]], "custom_results (speechtotext.plot.plotting.plotting attribute)": [[7, "speechtotext.plot.plotting.Plotting.CUSTOM_RESULTS"]], "meanofmetricbymodelname (class in speechtotext.plot.customplots)": [[7, "speechtotext.plot.customPlots.MeanOfMetricByModelname"]], "plotting (class in speechtotext.plot.plotting)": [[7, "speechtotext.plot.plotting.Plotting"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelscer method)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsCer.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelsmer method)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsMer.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelswer method)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsWer.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelswil method)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsWil.create_plot"]], "create_plot() (speechtotext.plot.customplots.boxplotofmodelswip method)": [[7, "speechtotext.plot.customPlots.BoxPlotOfModelsWip.create_plot"]], "create_plot() (speechtotext.plot.customplots.meanofmetricbymodelname method)": [[7, "speechtotext.plot.customPlots.MeanOfMetricByModelname.create_plot"]], "create_plot() (speechtotext.plot.plotting.basematplotlib method)": [[7, "speechtotext.plot.plotting.BaseMatPlotLib.create_plot"]], "create_plot() (speechtotext.plot.plotting.baseplotly method)": [[7, "speechtotext.plot.plotting.BasePlotly.create_plot"]], "launch_dtale() (speechtotext.plot.plotting.plotting method)": [[7, "speechtotext.plot.plotting.Plotting.launch_dtale"]], "save() (speechtotext.plot.plotting.basematplotlib method)": [[7, "speechtotext.plot.plotting.BaseMatPlotLib.save"]], "save() (speechtotext.plot.plotting.baseplotly method)": [[7, "speechtotext.plot.plotting.BasePlotly.save"]], "save_all() (speechtotext.plot.plotting.plotting method)": [[7, "speechtotext.plot.plotting.Plotting.save_all"]], "speechtotext.plot.customplots": [[7, "module-speechtotext.plot.customPlots"]], "speechtotext.plot.plotting": [[7, "module-speechtotext.plot.plotting"]]}})